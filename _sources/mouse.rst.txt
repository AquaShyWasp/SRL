
Mouse
=====
Methods to interact with the mouse.


------------

type EMouseDistribution
~~~~~~~~~~~~~~~~~~~~~~~

The available distributions used to generate a point in a box.

.. code-block:: pascal


  EMouseDistribution = (
    MOUSE_DISTRIBUTION_DEFAULT, // Use Mouse.Distribution
    MOUSE_DISTRIBUTION_RANDOM,  // Completely random point
    MOUSE_DISTRIBUTION_GAUSS,   // Weighted towards the center
    MOUSE_DISTRIBUTION_SKEWED,  // Weighted torwards current mouse position
    MOUSE_DISTRIBUTION_ROWP     // Weighted torwards current mouse position but more "rounded" compared to MOUSE_DISTRIBUTION_SKEWED
  );


------------

type TMouse
~~~~~~~~~~~

.. code-block:: pascal


  TMouse = record(TSRLBaseRecord)
    Speed: Double;                     // Overall mouse speed. (Default: 13)
    Gravity, Wind: Double;             // Gravity & Wind for generating mouse path (Default: 20 & 15)
    Distribution: EMouseDistribution;  // Default distribution to use. (Default: MOUSE_DISTRIBUTION_ROWP)
    MissChance: Double;                // Percentage chance to "Miss" the mouse (Default: 10)
    OnMoving: TMouseMovingEvent;       // Callback while mouse is being moved
    OnTeleport: TMouseTeleportEvent;   // Callback when mouse is teleported
  end;


------------

Mouse.Teleport
~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Teleport(X, Y: Int32);

Teleport the mouse to the desired X, Y coordinates.


------------

Mouse.Teleport
~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Teleport(P: TPoint);

Teleport the mouse to the desired point.


------------

Mouse.Position
~~~~~~~~~~~~~~
.. code-block:: pascal

 function TMouse.Position: TPoint;

Returns the mouse current position.


------------

Mouse.Hold
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Hold(Button: Int32);

Holds the desired mouse button down. The button will continue to be held down until `Mouse.Release` is called.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  Mouse.Hold(MOUSE_LEFT); // The mouse is now holding down left click.


------------

Mouse.Release
~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Release(Button: Int32);

Releases the desired mouse button which has been previously held.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  Mouse.Release(MOUSE_LEFT); // The mouse is no holding left click.


------------

Mouse.WindMouse
~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Release(Button: Int32);

The internal algorithm used by **Mouse.Move** to move the mouse in a human'ish way.

Credit: BenLand100 (https://github.com/BenLand100/SMART/blob/master/src/EventNazi.java#L201)


------------

Mouse.Move
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Move(P: TPoint);

Moves the mouse to the desired point.

**Example**

.. code-block:: pascal  

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.Move(P); // The mouse is now at 50,50


------------

Mouse.Move
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Move(P: TPoint);

Moves the mouse to the desired X,Y coordinate.

**Example**

.. code-block:: pascal  

  Mouse.Move(50, 50); // The mouse is now at 50,50


------------

Mouse.Move
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Move(Box: TBox; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT);

Moves the mouse to a random point in the box.

- **ForcedMove** determines if the mouse should be moved if already in the box. By default this is **False**
- **Distribution** determines the method to generate a random point. By default this uses **Mouse.Distribution**

**Example**

.. code-block:: pascal  

  var B: TBox;

  B.X1 := 100;
  B.Y1 := 100;
  B.X2 := 200;
  B.Y2 := 200;

  Mouse.Move(B); // The mouse is now randomly within 100,100,200,200


------------

Mouse.Move
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Move(Circle: TCircle; ForcedMove: Boolean = False);

Moves the mouse to a random point in an circle.

- **ForcedMove** determines if the mouse should be moved if already in the circle. By default this is **False**.

**Example**

.. code-block:: pascal  

  var C: TCircle;

  C.X := 100;
  C.Y := 100;
  C.Radius := 25;

  Mouse.Move(C);

  WriteLn(Mouse.Position()); // The mouse is now randomly within 100,100 with a radius of 25.


------------

Mouse.Move
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Move(Rect: TRectangle; ForcedMove: Boolean = False);

Moves the mouse to a random point in an rectangle.

- **ForcedMove** determines if the mouse should be moved if already in the rectangle. By default this is **False**.


------------

Mouse.Click
~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Click(Button: Int32);

Clicks the mouse with the desired button at the current mouse position.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  Mouse.Click(MOUSE_LEFT); // Left click the current mouse position


------------

Mouse.Click
~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Click(P: TPoint; Button: Int32);

Moves the mouse to P.X,P.Y and click the desired button.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  var P: TPoint;

  P.X := 50;
  P.Y := 50;

  Mouse.Click(P, MOUSE_LEFT); // Left click at 50,50


------------

Mouse.Click
~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Click(X, Y: Int32; Button: Int32);

Moves the mouse to to X,Y and clicks the desired button.

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  Mouse.Click(50, 50, MOUSE_LEFT); // Left click at 50,50


------------

Mouse.Click
~~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Click(Box: TBox; Button: Int32; ForcedMove: Boolean = False; Distribution: EMouseDistribution = MOUSE_DISTRIBUTION_DEFAULT);

Moves the mouse to a random point in the box and clicks the desired button.

- **ForcedMove** determines if the mouse should be moved if already in the box. By default this is **False**
- **Distribution** determines the method to generate a random point. By default this uses **Mouse.Distribution**

Available buttons:
 - MOUSE_LEFT
 - MOUSE_RIGHT
 - MOUSE_SCROLL
 - MOUSE_EXTRA_1
 - MOUSE_EXTRA_2

**Example**

.. code-block:: pascal  

  var B: TBox;

  B.X1 := 100;
  B.Y1 := 100;
  B.X2 := 200;
  B.Y2 := 200;

  Mouse.Click(B, MOUSE_LEFT); // The mouse is now randomly within 100,100,200,200


------------

Mouse.Miss
~~~~~~~~~~
.. code-block:: pascal

 procedure TMouse.Miss(P: TPoint);

"Misses" the destination point **P**. Will stop somewhere along the path or overshoot.

This could automatically be called depending on **Mouse.MissChance**.


------------

var Mouse
~~~~~~~~~
  Global mouse variable.


------------
