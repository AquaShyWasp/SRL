{$DEFINE SRL_GRANDEXCHANGE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSGrandExchange = record(TRSInterface)
    FINDER_BANKER: TRSObjectFinder;
  end;

function TRSGrandExchange.FindNPC(Finder: TRSObjectFinder): T2DPointArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  P: TPoint;
  B: TBox;
  I: Int32;
  Weights: TIntegerArray;
  Size: Int32;
begin
  // Find center G.E using yellow dots
  TPA := Minimap.GetDots(MINIMAP_DOT_NPC);
  TPA.Offset([2, 2]);
  TPA := TPA.Cluster(15).Biggest();
  with TPA.MeanEx() do
    P := Minimap.VecToMS([X, Y]);

  // Size of GE center at fixed client & default(50) zoom.
  Size := MainScreen.ConvertDistance(110);

  // Center G.E on the mainscreen
  B := [P.X, P.Y, P.X, P.Y];
  B := B.Expand(Size);

  Result := MainScreen.FindObject(Finder, B);

  if (Length(Result) > 0) then
  begin
    // Weigh from center AND towards the player
    SetLength(Weights, Length(Result));
    for I := 0 to High(Result) do
      if Length(Result[I]) > 0 then
        Weights[I] := Distance(Result[I].Mean, P) + Min(Distance(Result[I].Mean, MainScreen.Center), Size);

    QuickATPASort(Weights, Result, 0, High(Result), True);
  end;
end;

function TRSGrandExchange.GetTitle: String;
var
  B: TBox;
  Filter: TCompareRules;
begin
  B := Self.Bounds;
  B.X1 += 50;
  B.Y1 += 10;
  B.X2 -= 50;
  B.Y2 := B.Y1 + 15;
  B.LimitTo(Self.Bounds);

  Result := OCR.Recognize(B, [2070783], RS_FONTSET_BOLD_12);
end;

function TRSGrandExchange.IsOpen: Boolean;
begin
  Result := 'Grand Exchange' in GetTitle();
end;

procedure TRSGrandExchange.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

procedure TRSGrandExchange.Setup; overload;
begin
  Self.Name := 'Grand Exchange';

  Self.FINDER_BANKER.ColorClusters += [CTS2(6710894, 12, 0.19, 0.07), CTS2(2110788, 11, 0.29, 0.84), 10]; // grey, brown
  Self.FINDER_BANKER.ClusterDistance := 3;
  Self.FINDER_BANKER.Grow := 3;
  Self.FINDER_BANKER.Erode := 3;
  Self.FINDER_BANKER.MinLongSide := 10;
end;

procedure TRSGrandExchange.Setup(Mode: ERSClientMode); overload;
begin
  Self.Mode := Mode;

  case Self.Mode of
    RS_CLIENT_FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;

    RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;
  end;
end;

var
  GrandExchange: TRSGrandExchange;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  GrandExchange.Setup(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  GrandExchange.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  GrandExchange.Debug(Bitmap);
end;
