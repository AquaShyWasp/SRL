{$DEFINE SRL_BANKSCREEN_INCLUDED}
{$IFNDEF OSRS}
  {$include_once SRL/osr.simba}
{$ENDIF}

const
  BANK_BUTTON_REARRANGE_SWAP_OFF := TRSInterfaceButton.Create('bank_rearrange_swap_off.png');
  BANK_BUTTON_REARRANGE_SWAP_ON := TRSInterfaceButton.Create('bank_rearrange_swap_on.png');

  BANK_BUTTON_REARRANGE_INSERT_OFF := TRSInterfaceButton.Create('bank_rearrange_insert_off.png');
  BANK_BUTTON_REARRANGE_INSERT_ON := TRSInterfaceButton.Create('bank_rearrange_insert_on.png');

  BANK_BUTTON_WITHDRAW_ITEM_OFF := TRSInterfaceButton.Create('bank_withdraw_item_off.png');
  BANK_BUTTON_WITHDRAW_ITEM_ON := TRSInterfaceButton.Create('bank_withdraw_item_on.png');

  BANK_BUTTON_WITHDRAW_NOTE_OFF := TRSInterfaceButton.Create('bank_withdraw_note_off.png');
  BANK_BUTTON_WITHDRAW_NOTE_ON := TRSInterfaceButton.Create('bank_withdraw_note_on.png');

  BANK_BUTTON_QUANTITY_1_OFF := TRSInterfaceButton.Create('bank_quantity_1_off.png');
  BANK_BUTTON_QUANTITY_1_ON := TRSInterfaceButton.Create('bank_quantity_1_on.png');

  BANK_BUTTON_QUANTITY_5_OFF := TRSInterfaceButton.Create('bank_quantity_5_off.png');
  BANK_BUTTON_QUANTITY_5_ON := TRSInterfaceButton.Create('bank_quantity_5_on.png');

  BANK_BUTTON_QUANTITY_10_OFF := TRSInterfaceButton.Create('bank_quantity_10_off.png');
  BANK_BUTTON_QUANTITY_10_ON := TRSInterfaceButton.Create('bank_quantity_10_on.png');

  BANK_BUTTON_QUANTITY_CUSTOM_OFF := TRSInterfaceButton.Create('bank_quantity_custom_off.png');
  BANK_BUTTON_QUANTITY_CUSTOM_ON := TRSInterfaceButton.Create('bank_quantity_custom_on.png');

  BANK_BUTTON_QUANTITY_ALL_OFF := TRSInterfaceButton.Create('bank_quantity_all_off.png');
  BANK_BUTTON_QUANTITY_ALL_ON := TRSInterfaceButton.Create('bank_quantity_all_on.png');

  BANK_BUTTON_DEPOSIT_INVENTORY := TRSInterfaceButton.Create('bank_deposit_inventory.png');
  BANK_BUTTON_DEPOSIT_INVENTORY_HOVER := TRSInterfaceButton.Create('bank_deposit_inventory_hover.png');

  BANK_BUTTON_DEPOSIT_EQUIPMENT := TRSInterfaceButton.Create('bank_deposit_equipment.png');
  BANK_BUTTON_DEPOSIT_EQUIPMENT_HOVER := TRSInterfaceButton.Create('bank_deposit_equipment_hover.png');

  BANK_BUTTON_PLACEHOLDERS := TRSInterfaceButton.Create('bank_placeholders.png');
  BANK_BUTTON_PLACEHOLDERS_HOVER := TRSInterfaceButton.Create('bank_placeholders_hover.png');

  BANK_BUTTON_SEARCH_OFF := TRSInterfaceButton.Create('bank_search_off.png');
  BANK_BUTTON_SEARCH_OFF_HOVER := TRSInterfaceButton.Create('bank_search_off_hover.png');
  BANK_BUTTON_SEARCH_ON := TRSInterfaceButton.Create('bank_search_on.png');
  BANK_BUTTON_SEARCH_ON_HOVER := TRSInterfaceButton.Create('bank_search_on_hover.png');

  BANK_BUTTON_CLOSE := TRSInterfaceButton.Create('bank_close.png');
  BANK_BUTTON_CLOSE_HOVER := TRSInterfaceButton.Create('bank_close_hover.png');

  BANK_BUTTON_SCROLL := TRSInterfaceButton.Create('bank_scroll.png');
  BANK_BUTTON_SCROLLED_TOP := TRSInterfaceButton.Create('bank_scrolled_top.png');

type
  TRSBankScreen = type TRSInterface;

function TRSBankScreen.GetSlotBoxes: TBoxArray; constref;
var
  Rows: Int32;
begin
  Rows := (Self.Height() - 120) div 35;

  Result := Grid(8, Rows, 31, 31, [17, 5], [Self.X1 + 57, Self.Y1 + 77]);
end;

function TRSBankScreen.GetTabBoxes: TBoxArray;
begin
  Result := Grid(10, 1, 36, 30, [4, 0], [Self.X1 + 46, Self.Y1 + 42]);
end;

function TRSBankScreen.IsOpen: Boolean;
begin
  Result := Self.FindButton([BANK_BUTTON_REARRANGE_SWAP_ON, BANK_BUTTON_REARRANGE_SWAP_OFF]);
end;

procedure TRSBankScreen.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetTabBoxes(), False, $00FFFF);
  Bitmap.DrawBoxes(GetSlotBoxes(), False, $00FFFF);
end;

procedure TRSBankScreen.Setup(ClientMode: ERSClientMode);
begin
  Self.Name := 'BankScreen';
  Self.Buttons := [
    BANK_BUTTON_REARRANGE_SWAP_OFF,BANK_BUTTON_REARRANGE_SWAP_ON,
    BANK_BUTTON_REARRANGE_INSERT_OFF, BANK_BUTTON_REARRANGE_INSERT_ON,
    BANK_BUTTON_WITHDRAW_ITEM_OFF, BANK_BUTTON_WITHDRAW_ITEM_ON,
    BANK_BUTTON_WITHDRAW_NOTE_OFF, BANK_BUTTON_WITHDRAW_NOTE_ON,
    BANK_BUTTON_QUANTITY_1_OFF, BANK_BUTTON_QUANTITY_1_ON,
    BANK_BUTTON_QUANTITY_5_OFF, BANK_BUTTON_QUANTITY_5_ON,
    BANK_BUTTON_QUANTITY_10_OFF, BANK_BUTTON_QUANTITY_10_ON,
    BANK_BUTTON_QUANTITY_CUSTOM_OFF, BANK_BUTTON_QUANTITY_CUSTOM_ON,
    BANK_BUTTON_QUANTITY_ALL_OFF, BANK_BUTTON_QUANTITY_ALL_ON,
    BANK_BUTTON_DEPOSIT_INVENTORY, BANK_BUTTON_DEPOSIT_INVENTORY_HOVER,
    BANK_BUTTON_DEPOSIT_EQUIPMENT, BANK_BUTTON_DEPOSIT_EQUIPMENT_HOVER,
    BANK_BUTTON_PLACEHOLDERS, BANK_BUTTON_PLACEHOLDERS_HOVER,
    BANK_BUTTON_SEARCH_OFF, BANK_BUTTON_SEARCH_OFF_HOVER,
    BANK_BUTTON_SEARCH_ON, BANK_BUTTON_SEARCH_ON_HOVER,
    BANK_BUTTON_CLOSE,BANK_BUTTON_CLOSE_HOVER,
    BANK_BUTTON_SCROLL, BANK_BUTTON_SCROLLED_TOP
  ];

  if ClientMode in [RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM, RS_CLIENT_FIXED] then
  begin
    Self.Alignment.Left := [@InterfaceArea.X1];
    Self.Alignment.Right := [@InterfaceArea.X2];
    Self.Alignment.Top := [@InterfaceArea.Y1, 2];
    Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
    Self.Alignment.Center.MaxWidth := 488;
    Self.Alignment.Center.MaxHeight := 800;
  end;
end;

function TRSBankScreen.GetTitle: String;
var
  B: TBox;
  BMP: TMufasaBitmap;
  TPA: TPointArray;
begin
  B := Self.Bounds;
  B.X1 += 50;
  B.Y1 += 5;
  B.X2 -= 50;
  B.Y2 := B.Y1 + 25;

  BMP.FromClient(B);
  BMP.ThresholdAdaptive(0, 255, False, TM_Mean, 15);
  BMP.FindColors(TPA, $0000FF);
  with TPA.Bounds() do
    BMP.Crop(X1, Y1, X2, Y2);

  Result := OCR.Recognize(BMP.ToMatrix(), [255], RS_FONTSET_BOLD_12);

  BMP.Free();
end;

function TRSBankScreen.IsTitle(Text: String): Boolean; overload;
begin
  Result := Text in Self.GetTitle();
end;

function TRSBankScreen.IsTitle(Text: String; WaitTime: Int32): Boolean; overload;
var
  T: UInt64;
begin
  T := GetTickCount() + WaitTime;
  while (T > GetTickCount()) do
  begin
    if Self.IsTitle(Text) then
      Exit(True);

    Wait(0, 1000, wdLeft);
  end;
end;

function TRSBankScreen.Search(Item: String): Boolean;
begin
  if Self.IsTitle('Showing items: ' + LowerCase(Item)) then
    Exit(True);

  // Clear current search
  if Self.IsTitle('Showing items:') and (not Self.ClickButton(BANK_BUTTON_SEARCH_OFF, MOUSE_LEFT)) then
    Exit(False);

  if Self.ClickButton(BANK_BUTTON_SEARCH_ON, MOUSE_LEFT) and Chatbox.AnswerQuery('Show items', Item, Random(2000, 2500)) then
    Result := Self.IsTitle('Showing items: ' + LowerCase(Item), Random(2000, 2500));
end;

function TRSBankScreen.FindItems: TBoxArray; constref;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Row: TPointArray;
  Rows: T2DPointArray;
  B: TBox;
begin
  if SRL.FindColors(TPA, CTS2(3358280, 1, 0.80, 0.41), Self.GetSlotBoxes().Merge()) > 0 then
  begin
    TPA := TPA.Invert();

    Rows := TPA.Cluster(100, 3);
    with GetATPABounds(Rows) do
      Rows.SortByIndex([X1, Y1]); // Sort top to bottom

    for Row in Rows do
    begin
      ATPA := Row.Cluster(3);
      with GetATPABounds(ATPA) do
        ATPA.SortByIndex([X1, Y1]); // Sort left to right

      for TPA in ATPA do
      begin
        B := TPA.Bounds();
        if (B.Width <= 36) and (B.Height <= 36) then
          Result := Result + TPA.Bounds();
      end;
    end;
  end;
end;

const
  BANK_WITHDRAW_ALL = -1;
  BANK_WITHDRAW_ALL_BUT_ONE = -2;

procedure TRSBankScreen.ScrollToTop;
begin
  if not Self.IsOpen() then
    Exit;

  while not Self.FindButton(BANK_BUTTON_SCROLLED_TOP) do
    Mouse.Scroll(Self.GetSlotBoxes().Merge(), Random(1, 3), False);
end;

function TRSBankScreen.WithdrawItem(B: TBox; Amount: Int32): Boolean; overload;
begin
  Mouse.Move(Bounds);

  case Amount of
    BANK_WITHDRAW_ALL:
      Result := ChooseOption.Select('Withdraw-All');
    BANK_WITHDRAW_ALL_BUT_ONE:
      Result := ChooseOption.Select('Withdraw-All-but-1');
    else
    begin
      if ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) then
        Exit(True);
      if ChooseOption.Select('Withdraw-X') and Chatbox.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500)) then
        Exit(True);
    end;
  end;
end;

function TRSBankScreen.WithdrawItem(Slot, Amount: Int32): Boolean; overload;
begin
  Self.ScrollToTop();

  Result := Self.WithdrawItem(Self.GetSlotBoxes[Slot], Amount);
end;

// function TRSBankScreen.WithdrawNote
// function TRSBankScreen.WithdrawQuantity


var
  BankScreen: TRSBankScreen;

begin
  SRL.AddSetupMethod(@BankScreen.Setup);
  SRL.AddDebugMethod(@BankScreen.Debug);
end;

