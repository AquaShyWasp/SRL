{$DEFINE SRL_DEPOSITSCREEN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSDepositScreen = record(TRSInterface)
    BUTTON_DEPOSIT_QUANTITY_CUSTOM_ON: TRSInterfaceButton;
    BUTTON_DEPOSIT_QUANTITY_CUSTOM_OFF: TRSInterfaceButton;
    BUTTON_DEPOSIT_QUANTITY_ALL_ON: TRSInterfaceButton;
    BUTTON_DEPOSIT_QUANTITY_ALL_OFF: TRSInterfaceButton;

    BUTTON_DEPOSIT_INVENTORY: TRSInterfaceButton;
    BUTTON_DEPOSIT_INVENTORY_HOVER: TRSInterfaceButton;
  end;

procedure TRSDepositScreen.Setup(ClientMode: ERSClientMode);
begin
  Self.Name := 'Deposit Screen';

  Self.BUTTON_DEPOSIT_QUANTITY_CUSTOM_ON := Self.AddBitmapButton('deposit_quantity_custom_on.png');
  Self.BUTTON_DEPOSIT_QUANTITY_CUSTOM_OFF := Self.AddBitmapButton('deposit_quantity_custom_off.png');
  Self.BUTTON_DEPOSIT_QUANTITY_ALL_ON := Self.AddBitmapButton('deposit_quantity_all_on.png');
  Self.BUTTON_DEPOSIT_QUANTITY_ALL_OFF := Self.AddBitmapButton('deposit_quantity_all_off.png');

  Self.BUTTON_DEPOSIT_INVENTORY := Self.AddBitmapButton('deposit_inventory.png');
  Self.BUTTON_DEPOSIT_INVENTORY_HOVER := Self.AddBitmapButton('deposit_inventory_hover.png');

  case ClientMode of
    RS_CLIENT_FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;

    RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;
  end;
end;

function TRSDepositScreen.GetSlotBoxes: TBoxArray; constref;
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

function TRSDepositScreen.IsOpen: Boolean; overload;
var
  T: UInt64;
begin
  Result := Self.FindButton([Self.BUTTON_DEPOSIT_INVENTORY, Self.BUTTON_DEPOSIT_INVENTORY_HOVER]);
  if Result then
  begin
    T := GetTickCount() + Round(SRL.TruncatedGauss(1000, 2000));
    while (T > GetTickCount()) and (SRL.CountColor(CTS0(65536), Self.GetSlotBoxes().Merge()) = 0) do
      Wait(50, 100);
  end;
end;

function TRSDepositScreen.IsOpen(WaitTime: Int32): Boolean; overload;
var
  T: UInt64;
begin
  T := GetTickCount() + WaitTime;

  while (T > GetTickCount()) do
  begin
     if Self.IsOpen() then
       Exit(True);

     Wait(0, 1000, wdLeft);
  end;
end;

procedure TRSDepositScreen.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetSlotBoxes(), False, $00FFFF);
end;

var
  DepositScreen: TRSDepositScreen;

begin
  SRL.AddDebugMethod(@DepositScreen.Debug);
  SRL.AddSetupMethod(@DepositScreen.Setup);
end;
