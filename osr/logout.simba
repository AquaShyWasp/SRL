{$DEFINE SRL_LOGOUT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSLogout = record(TRSInterface)
    BUTTON_LOGOUT: TRSInterfaceButton;
    BUTTON_WORLD_SWITCHER: TRSInterfaceButton;

    BUTTON_WORLD_SWITCHER_CLOSE: TRSInterfaceButton;
    BUTTON_WORLD_SWITCHER_CLOSE_HOVER: TRSInterfaceButton;
  end;

procedure TRSLogout.Setup; overload;
begin
  Self.Name := 'Options';
end;

procedure TRSLogout.Setup(Mode: ERSClientMode); overload;
begin
  Self.Mode := Mode;

  Self.BUTTON_LOGOUT := Self.AddOCRButton('Click here to logout', RS_FONT_BOLD_12, -1);
  Self.BUTTON_WORLD_SWITCHER := Self.AddOCRButton('World Switcher', RS_FONT_BOLD_12, -1);

  Self.BUTTON_WORLD_SWITCHER_CLOSE := Self.AddBitmapButton('logout_worldswitcher_close.png');
  Self.BUTTON_WORLD_SWITCHER_CLOSE_HOVER := Self.AddBitmapButton('logout_worldswitcher_close_hover.png');

  Self.Alignment.Left := [@GameTab.X1, -3];
  Self.Alignment.Right := [@GameTab.X2, 3];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSLogout.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = TAB_LOGOUT);
end;

function TRSLogout.Open: Boolean;
begin
  Result := GameTabs.Open(TAB_LOGOUT);
end;

function TRSLogout.IsWorldSwitcherOpen: Boolean;
begin
  Result := Self.IsOpen() and Self.FindButton([Self.BUTTON_WORLD_SWITCHER_CLOSE, Self.BUTTON_WORLD_SWITCHER_CLOSE_HOVER]);
end;

function TRSLogout.CloseWorldSwitcher: Boolean;
var
  T: UInt64;
begin
  if Self.IsWorldSwitcherOpen() then
  begin
    if Self.ClickButton([Self.BUTTON_WORLD_SWITCHER_CLOSE, Self.BUTTON_WORLD_SWITCHER_CLOSE_HOVER], MOUSE_LEFT) then
    begin
      T := GetTickCount() + 2500;

      while (T > GetTickCount()) do
      begin
        if not Self.IsWorldSwitcherOpen() then
          Exit(True);

        Wait(0, 1000, wdLeft);
      end;
    end;
  end;
end;

function TRSLogout.ClickLogout(Attempts: Int32 = 5; TryTime: Int32 = 20000): Boolean;
var
  T, Interval: UInt64;
begin
  if not Self.Open() then
    Exit;
  if Self.IsWorldSwitcherOpen() and (not Self.CloseWorldSwitcher()) then
    Exit;

  Interval := TryTime div Attempts;

  for 1 to Attempts do
  begin
    if Self.ClickButton(Self.BUTTON_LOGOUT, MOUSE_LEFT) then
    begin
      T := GetTickCount() + Interval + SRL.NormalRange(-2000, 2000);
      while (T > GetTickCount()) do
      begin
        if not RSClient.IsLoggedIn() then
          Exit(True);

        Wait(100, 200);
      end;
    end;
  end;
end;

var
  Logout: TRSLogout;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Logout.Setup(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Logout.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Logout.Debug(Bitmap);
end;
