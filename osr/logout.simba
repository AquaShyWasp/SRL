{$DEFINE SRL_LOGOUT_INCLUDED}
{$IFNDEF OSRS}
  {$include_once SRL/osr.simba}
{$ENDIF}

const
  LOGOUT_BUTTON_LOGOUT := TRSInterfaceButton.Create('Click here to logout', RS_FONTSET_BOLD_12, -1);
  LOGOUT_BUTTON_WORLD_SWITCHER := TRSInterfaceButton.Create('World Switcher', RS_FONTSET_BOLD_12, -1);

  LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE := TRSInterfaceButton.Create('logout_worldswitcher_close.png');
  LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE_HOVER := TRSInterfaceButton.Create('logout_worldswitcher_close_hover.png');

type
  TRSLogout = type TRSInterface;

procedure TRSLogout.Setup(ClientMode: ERSClientMode);
begin
  Self.Name := 'Options';
  Self.Buttons := [
    LOGOUT_BUTTON_LOGOUT, LOGOUT_BUTTON_WORLD_SWITCHER,
    LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE, LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE_HOVER
  ];

  if ClientMode in [RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM, RS_CLIENT_FIXED] then
  begin
    Self.Alignment.Left := [@GameTab.X1, -3];
    Self.Alignment.Right := [@GameTab.X2, 3];
    Self.Alignment.Top := [@GameTab.Y1];
    Self.Alignment.Bottom := [@GameTab.Y2];
  end;
end;

function TRSLogout.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = TAB_LOGOUT);
end;

function TRSLogout.Open: Boolean;
begin
  Result := GameTabs.Open(TAB_LOGOUT);
end;

function TRSLogout.IsWorldSwitcherOpen: Boolean;
begin
  Result := Self.IsOpen() and Self.FindButton([LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE, LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE_HOVER]);
end;

function TRSLogout.CloseWorldSwitcher: Boolean;
var
  T: UInt64;
begin
  if Self.IsWorldSwitcherOpen() then
  begin
    if Self.ClickButton([LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE, LOGOUT_BUTTON_WORLD_SWITCHER_CLOSE_HOVER], MOUSE_LEFT) then
    begin
      T := GetTickCount() + 2500;

      while (T > GetTickCount()) do
      begin
        if not Self.IsWorldSwitcherOpen() then
          Exit(True);

        Wait(0, 1000, wdLeft);
      end;
    end;
  end;
end;

function TRSLogout.ClickLogout(Attempts: Int32 = 5; TryTime: Int32 = 20000): Boolean;
var
  T, Interval: UInt64;
begin
  if not Self.Open() then
    Exit;
  if Self.IsWorldSwitcherOpen() and (not Self.CloseWorldSwitcher()) then
    Exit;

  Interval := TryTime div Attempts;

  for 1 to Attempts do
  begin
    if Self.ClickButton(LOGOUT_BUTTON_LOGOUT, MOUSE_LEFT) then
    begin
      T := GetTickCount() + Interval + SRL.NormalRange(-2000, 2000);
      while (T > GetTickCount()) do
      begin
        if not SRL.IsLoggedIn() then
          Exit(True);

        Wait(100, 200);
      end;
    end;
  end;
end;

var
  Logout: TRSLogout;

begin
  SRL.AddSetupMethod(@Logout.Setup);
  SRL.AddDebugMethod(@Logout.Debug);
end;
