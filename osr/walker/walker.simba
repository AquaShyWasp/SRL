(*
Walker
======
*)

{.$DEFINE SRL_DEBUG_WALKER}

{$DEFINE SRL_WALKER_INCLUDED}

{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

{$I webgraph.simba}
{$I world.graph}
{$I zeah.graph}

type
  TRSWalkerCache = record
    World: TMufasaBitmap;
    WorldSample: TMufasaBitmap;
    Scaling: Int32;

    Position: TPoint;
    Radius: Int32;

    LastUsed: UInt64;
  end;

  PRSWalker = ^TRSWalker;

  TRSWalker_OnWalkEvent = procedure(Walker: PRSWalker; PlayerPoint: TPoint; WorldPoint: TPoint);
  TRSWalker_OnWalkEventEx = procedure(Walker: PRSWalker; PlayerPoint: TPoint; WorldPoint: TPoint) of object;

  TRSWalker = record(TSRLBaseRecord)
    Cache: array of TRSWalkerCache;
    CacheSize: Int32;
    CacheRadius: Int32;

    World: TMufasaBitmap;
    WorldSample: TMufasaBitmap;
    WebGraph: TWebGraph;

    EnableRunAtEnergy: Int32;

    Scaling: Int32;
    Similarity: Single;
    ScreenWalk: Boolean;

    ClickRandomness: Int32;

    Path: TPointArray;
    PathIndex: Int32;

    Enabled: Boolean;

    OnWalkEvent: TRSWalker_OnWalkEvent;
    OnWalkEventEx: TRSWalker_OnWalkEventEx;
  end;

function TRSWalkerCache.GetMyPos(Minimap: TMufasaBitmap; MinimapSample: TMufasaBitmap; MinimapOffset: TPoint; out Similarity: Single): TPoint;
var
  P: TPoint;
  Sample: TMufasaBitmap;
  Matrix: TSingleMatrix;
  _: Single;
  B: TBox;
begin
  P.X := Self.Position.X div Self.Scaling;
  P.Y := Self.Position.Y div Self.Scaling;

  // Get scaled world map around last known position
  B.X1 := Max(P.X - (Self.Radius div Self.Scaling), 0);
  B.Y1 := Max(P.Y - (Self.Radius div Self.Scaling), 0);
  B.X2 := Min(P.X + (Self.Radius div Self.Scaling), WorldSample.GetWidth()  - 1);
  B.Y2 := Min(P.Y + (Self.Radius div Self.Scaling), WorldSample.GetHeight() - 1);

  Sample := WorldSample.Copy(B.X1, B.Y1, B.X2, B.Y2);

  // Find scaled minimap on scaled world map around last known position
  Matrix := Sample.MatchTemplate(MinimapSample, TM_CCOEFF_NORMED);

  Result.X := B.X1 * Self.Scaling;
  Result.Y := B.Y1 * Self.Scaling;
  Result   += Matrix.ArgMax() * Self.Scaling;

  // Now search the world map around our match without scaling
  Result   := TRSWalker.FindImageNear(Result, Self.World, Minimap, 20, [-2, 0, 2], Similarity, _);
  Result   += MinimapOffset;
  Result.X += Minimap.GetWidth() div 2;
  Result.Y += Minimap.GetHeight() div 2;

  Sample.Free();
end;

function TRSWalker.FindMap(Map: String): String; static;
var
  Mask: String = '.png;.bmp;';
  Files: TStringArray;
begin
  Mask := StringReplace(Mask, '.', Map + '.', [rfReplaceAll]);

  if FileExists(Map) then
    Exit(Map);

  Files := FindFile(ExtractFileDir(Map), Mask, False, False) +
           FindFile({$MACRO CURRENT_DIRECTORY}, Mask, True, False);

  if Length(Files) > 0 then
    Result := Files[0];
end;

function TRSWalker.LoadMap(Path: String): TMufasaBitmap; static;
var
  Cache: String;
begin
  Result.Init(Client.GetMBitmaps());

  if ExtractFileExt(Path) <> '.bmp' then
  begin
    Cache := ExtractFileDir(Path) + DirectorySeparator + SHA1File(Path) + '.bmp';

    // Save as bitmap for much faster loading
    if not FileExists(Cache) then
    begin
      Result.LoadFromFile(Path);
      Result.SaveToFile(Cache);
    end;

    if FileExists(Cache) then
      Path := Cache;
  end;

  Result.LoadFromFile(Path);
end;

procedure TRSWalker.Free;
begin
  Self.WorldSample.Free();
  Self.World.Free();
end;

(*
TRSWalker.Setup
~~~~~~~~~~~~~~~
.. pascal:: procedure TRSWalker.Setup(Map: String; Scaling: Int32 = 10);

Setup a RSWalker variable.
This only needs calling once per variable so it's suggested to use a global variable.

Parameters
----------

Map
	File path to an image or a map name found in *SRL/osr/walker/maps*.
Scaling
	Multipler to downscale the map. Lower will bring more accuracy at the cost of speed. (Default: 10)
	
Example
-------

  var Walker: TRSWalker;

  Walker.Setup('world'); // Setup using the world map found in the maps directory
*)
procedure TRSWalker.Setup(Map: String; Scaling: Int32 = 10);
var
  Path: String;
begin
  Self.Name := 'Walker';

  Path := Self.FindMap(Map);
  if (Path = '') then
    Self.Fatal('Unable to find map: ' + Map);

  Self.Scaling := Scaling;
  Self.CacheSize := 3;
  Self.CacheRadius := 200;
  Self.ClickRandomness := 4;

  case Map.Lower() of
    'world': Self.WebGraph := WorldWeb;
    'zeah':  Self.WebGraph := ZeahWeb;
  end;

  Self.WorldSample.Init(Client.GetMBitmaps());

  Self.World := Self.LoadMap(Path);
  Self.World.Downsample(Self.Scaling, Self.WorldSample);
end;

procedure TRSWalker.ClearDots(Bitmap: TMufasaBitmap);
const
  Template: TPointArray =
    [        [1, 0], [2, 0],
     [0, 1], [1, 1], [2, 1], [3, 1],
     [0, 2], [1, 2], [2, 2], [3, 2],
     [0, 3], [1, 3], [2, 3], [3, 3],
             [1, 4], [2, 4]
    ];
var
  Dots: TPointArray;
  ATPA: T2DPointArray;
  Corners: array[0..3] of TPoint;
  I, J: Int32;
  Colors: TIntegerArray;
begin
  Dots := Minimap.GetDotsBitmap(Bitmap, [MINIMAP_DOT_NPC, MINIMAP_DOT_ITEM, MINIMAP_DOT_PLAYER]);

  SetLength(ATPA, Length(Dots));

  for I := 0 to High(Dots) do
  begin
    ATPA[I] := Template.Offset(Dots[I]);

    Bitmap.DrawTPA(ATPA[I], clFuchsia);
  end;

  for I := 0 to High(Dots) do
  begin
    Corners[0] := [ATPA[I][0].X - 1, ATPA[I][0].Y];
    Corners[1] := [ATPA[I][1].X + 1, ATPA[I][1].Y];
    Corners[2] := [ATPA[I][14].X - 1, ATPA[I][14].Y];
    Corners[3] := [ATPA[I][15].X + 1, ATPA[I][15].Y];

    Colors := Bitmap.GetPixels(Corners);
    for J := 0 to High(Colors) do
      if Colors[J] <> clFuchsia then
      begin
        Bitmap.DrawTPA(ATPA[I], Colors[j]);

        Break;
      end;
  end;
end;

function TRSWalker.GetMinimap(out CenterOffset: TPoint): TMufasaBitmap;
var
  Bounds: TBox;
  Raw, Templ: TMufasaBitmap;
  Poly: TPointArray;
  Angle: Double;
  B: TBox;
  I: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  Column: TBox;
begin
  Angle := Minimap.GetCompassAngle(False);
  Bounds := Minimap.Bounds();

  Poly := TPAFromPolygon(Minimap.GetPolygon());
  Poly := Poly.Invert(Bounds);
  Poly := Poly.Offset([-Bounds.X1, -Bounds.Y1]);

  Result.Init(Client.GetMBitmaps());

  Raw := GetMufasaBitmap(BitmapFromClient(Bounds));
  ClearDots(Raw);
  Raw.RotateBitmapEx(Angle, False, True, Result);

  Templ.Init();
  Templ.SetSize(Raw.GetWidth(), Raw.GetHeight());
  Templ.DrawClear(clFuchsia);

  Raw.DrawTPA(Poly, clFuchsia);
  Raw.RotateBitmapEx(Angle, False, False, Templ);

  // Expand top left until box hits fushsia
  B.X1 := (Raw.GetWidth() div 2) - 30;
  B.Y1 := (Raw.GetHeight() div 2) - 30;

  while (Templ.GetPixel(B.X1, B.Y1) <> clFuchsia) do
  begin
    B.X1 -= 1;
    B.Y1 -= 1;
  end;

  // Expand bottom right until box hits fushsia
  B.X2 := (Raw.GetWidth() div 2) + 30;
  B.Y2 := (Raw.GetHeight() div 2) + 30;

  while (Templ.GetPixel(B.X2, B.Y2) <> clFuchsia) do
  begin
    B.X2 += 1;
    B.Y2 += 1;
  end;

  // Expand all corners until corner hits fushsia
  // Top Left
  while Templ.GetPixel(B.X1, B.Y1) <> clFuchsia do
  begin
    B.X1 -= 1;
    B.Y1 -= 1;
  end;

  // Top Right
  while Templ.GetPixel(B.X2, B.Y1) <> clFuchsia do
  begin
    B.X2 += 1;
    B.Y1 -= 1;
  end;

  // Bottom Left
  while Templ.GetPixel(B.X1, B.Y2) <> clFuchsia do
  begin
    B.X1 -= 1;
    B.Y2 += 1;
  end;

  // Bottom Right
  while Templ.GetPixel(B.X2, B.Y2) <> clFuchsia do
  begin
    B.X2 += 1;
    B.Y2 += 1;
  end;

  B := B.Expand(5);

  Templ.FindColors(TPA, clFuchsia);

  // Fix corners, replace fuchica with nearest color in columns
  // Top corners
  ATPA := FindTPAColumns(TPA.FilterBox(B.Partition(2, 1)[0]));
  for I := 0 to High(ATPA) do
  begin
    Column := GetTPABounds(ATPA[I]);

    Result.Rectangle(Column, Templ.GetPixel(Column.X1, Column.Y2 + 1));
  end;

  // Bottom corners
  ATPA := FindTPAColumns(TPA.FilterBox(B.Partition(2, 1)[1]));
  for I := 0 to High(ATPA) do
  begin
    Column := GetTPABounds(ATPA[I]);

    Result.Rectangle(Column, Templ.GetPixel(Column.X1, Column.Y1 - 1));
  end;

  Result.Crop(B.X1 + 1, B.Y1 + 1, B.X2 - 1, B.Y2 - 1);

  Templ.Free();
  Raw.Free();

  CenterOffset.X := Bounds.Middle.X - (Bounds.X1 + B.Middle.X);
  CenterOffset.Y := Bounds.Middle.Y - (Bounds.Y1 + B.Middle.Y);
end;

function TRSWalker.FindImageNear(p:TPoint; Large, Sub: TMufasaBitmap; Area:Int32; Offsets: TSingleArray; out match: Single; out Offset: Single): TPoint; static;
var
  W,H: Int32;
  Slice: TMufasaBitmap;
  B: TBox;
  Matrix: TSingleMatrix;
  tmp: TMufasaBitmap;
  Test: Single;
  Best: TPoint;
begin
  Match := 0;

  W := Large.GetWidth - 1;
  H := Large.GetHeight - 1;

  B := [p.x, p.y, p.x + Sub.GetWidth(), p.y + Sub.GetHeight()];
  B := [B.x1-Area, B.y1-Area, B.x2+Area, B.y2+Area];
  B := [max(0,B.x1),max(0,B.y1),min(W,B.x2),min(H,B.y2)];

  Slice := Large.Copy(B.x1, B.y1, B.x2, B.y2);
  Slice.SetSize(Max(Slice.GetWidth(), Sub.GetWidth()), Max(Slice.GetHeight(), Sub.GetHeight()));

  client.getMBitmaps.AddBMP(Slice);
  Tmp.init(Client.getMBitmaps());

  for Test in Offsets do
  begin
    Slice.RotateBitmapEx(Radians(Test), False, True, tmp);
    Matrix := Tmp.MatchTemplate(Sub, TM_CCOEFF_NORMED);
    Best := Matrix.ArgMax;
    if Matrix[Best.Y, Best.X] > Match then
    begin
      Match := Matrix[Best.Y, Best.X];
      Result := [Best.x-Area+p.x, Best.y-Area+p.y];
      Offset := Test;
    end;
  end;

  Slice.Free();
  Tmp.Free();
end;

procedure TRSWalker.AddCache(Position: TPoint);
var
  Cache: TRSWalkerCache;
  I, J: Int32;
begin
  if Self.CacheSize = 0 then
  begin
    if Length(Self.Cache) > 0 then
      SetLength(Self.Cache, 0);

    Exit;
  end;

  {$IFDEF SRL_DEBUG_WALKER}
  Self.Debug('New cache: ' + ToString(Position));
  {$ENDIF}

  Cache.Position := Position;
  Cache.Radius := Self.CacheRadius;
  Cache.Scaling := Self.Scaling;
  Cache.World := Self.World;
  Cache.WorldSample := Self.WorldSample;
  Cache.LastUsed := GetTickCount();

  if Length(Self.Cache) = Self.CacheSize then
  begin
    // Sort by recently used
    for I := 0 to High(Self.Cache) do
      for J := 0 to High(Self.Cache) do
        if Self.Cache[I].LastUsed > Self.Cache[J].LastUsed then
          Swap(Self.Cache[I], Self.Cache[J]);

    {$IFDEF SRL_DEBUG_WALKER}
    Self.Debug('Evicting cache: ' + ToString(Self.Cache[High(Self.Cache)].Position));
    {$ENDIF}

    Self.Cache[High(Self.Cache)] := Cache;
  end else
    Self.Cache := Self.Cache + Cache;
end;

(*
TRSWalker.GetMyPos
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.GetMyPos: TPoint;

Returns the players current position on the loaded map.

Example
-------

  WriteLn(Walker.GetMyPos());
  
  // Check to see the match percentage if needed
  WriteLn(Walker.Similarity);
*)
function TRSWalker.GetMyPos: TPoint;
var
  MinimapSample, MinimapBitmap: TMufasaBitmap;
  Matrix: TSingleMatrix;
  MinimapOffset: TPoint;
  I: Int32;
  TPA: TPointArray;
  Match, Rotation: Single;
  P: TPoint;
  CacheUsed: Int32;
  Weights: TIntegerArray;
  {$IFDEF SRL_DEBUG_WALKER}
  T: UInt64 := GetTickCount();
  {$ENDIF}
begin
  if (Self.World = nil) then
    Self.Fatal('Walker has not been setup');

  MinimapSample.Init(Client.GetMBitmaps());

  MinimapBitmap := GetMinimap(MinimapOffset);
  MinimapBitmap.Downsample(Self.Scaling, MinimapSample);

  try
    Self.Similarity := 0;

    // Try cache first
    for I := 0 to High(Self.Cache) do
    begin
      P := Self.Cache[I].GetMyPos(MinimapBitmap, MinimapSample, MinimapOffset, Match);

      if Match > Self.Similarity then
      begin
        Self.Similarity := Match;
        CacheUsed := I;
        Result := P;

        // If a really good match just exit here
        if Match > 0.60 then
          Break;
      end;
    end;

    // Good cache hit?
    if Self.Similarity > 0.40 then
    begin
      Self.Cache[CacheUsed].LastUsed := GetTickCount();
      Self.Cache[CacheUsed].Position := Result;

      {$IFDEF SRL_DEBUG_WALKER}
      Self.Debug('Cache @ ' + ToString(Round(Self.Similarity, 3)) + ' (' + ToString(GetTickCount() - T) + ' ms)');
      {$ENDIF}

      Swap(Self.Cache[CacheUsed], Self.Cache[0]); // Move to first. likely to use this next

      Exit;
    end;

    {$IFDEF SRL_DEBUG_WALKER}
    if Length(Self.Cache) > 0 then
      Self.Debug('No cache hit: ' + ToString(Self.Similarity));
    {$ENDIF}

    Matrix := WorldSample.MatchTemplate(MinimapSample, TM_CCOEFF_NORMED);

    // Inspect 5 best hits on the scaled map without scaling and pick the best
    TPA := Matrix.Indices(Matrix.Max() - 0.10, __GT__);
    TPA := TPA.Split(10).Means();

    SetLength(Weights, Length(TPA));
    for I := 0 to High(TPA) do
      Weights[I] := Round(Matrix[TPA[I].Y, TPA[I].X] * 100000);
    QuickTPASort(Weights, TPA, 0, High(TPA), False);

    for I := 0 to Min(5, High(TPA)) do
    begin
      P   := Self.FindImageNear(TPA[I] * Self.Scaling, Self.World, MinimapBitmap, 20, [-2, 0, 2], Match, Rotation);
      P   += MinimapOffset;
      P.X += MinimapBitmap.GetWidth() div 2;
      P.Y += MinimapBitmap.GetHeight() div 2;

      if Match > Self.Similarity then
      begin
        Self.Similarity := Match;
        CacheUsed := I;
        Result := P;
      end;
    end;

    // Add to cache if good hit
    if Self.Similarity > 0.40 then
      AddCache(Result);

    {$IFDEF SRL_DEBUG_WALKER}
    Self.Debug('Cache @ ' + ToString(Round(Self.Similarity, 3)) + ' (' + ToString(GetTickCount() - T) + ' ms)');
    {$ENDIF}
  finally
    if MinimapBitmap <> nil then
      MinimapBitmap.Free();
    if MinimapSample <> nil then
      MinimapSample.Free();
  end;
end;

function TRSWalker.WorldToMM(PlayerPoint, WorldPoint: TPoint; Radians: Double): TPoint; overload;
begin
  Result := WorldPoint - PlayerPoint + Minimap.Center;
  Result := Result.Rotate(Radians, Minimap.Center);
end;

function TRSWalker.WorldToMM(WorldPoint: TPoint): TPoint; overload;
begin
  Result := Self.WorldToMM(Self.GetMyPos(), WorldPoint, Minimap.GetCompassAngle(False));
end;

procedure TRSWalker.CheckRunEnergy;
begin
  if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < Self.EnableRunAtEnergy) then
    Exit;

  Self.EnableRunAtEnergy := SRL.SkewedRand(40, 10, 100);

  Minimap.EnableRun();
end;

procedure TRSWalker.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.GetMyPos();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.GetMyPos();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean;
var
  P: TPoint;
begin
  Result := True;

  if Self.ScreenWalk then
  begin
    Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean);

    if not MainScreen.IsUpText('Walk here') then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    P := MinimapPoint.Random(-Randomness, Randomness);
    while not Minimap.IsPointOn(P) do
      P := MinimapPoint.Random(-Randomness, Randomness);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);
end;

// Walks to the final point in the path
function TRSWalker.WalkFinalStep(PlayerPoint, WorldPoint: TPoint; WaitUntilDistance: Int32): Boolean;
var
  MinimapPoint: TPoint;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, 0);
  if Result then
    Self.WaitMoving(WorldPoint, WaitUntilDistance);
end;

// Walks to a (non final) point in the path
function TRSWalker.WalkStep(PlayerPoint, WorldPoint: TPoint): Boolean;
var
  MinimapPoint: TPoint;
  WaitUntilDistance: Int32;
begin
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, PlayerPoint, WorldPoint);
  if (@Self.OnWalkEventEx <> nil) then
    Self.OnWalkEventEx(@Self, PlayerPoint, WorldPoint);

  if not Self.Enabled then
    Exit(True);

  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Minimap.GetCompassAngle(False));
  if (not Minimap.IsPointOn(MinimapPoint)) then
    Exit(False);
  if (Minimap.Center.DistanceTo(MinimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(MinimapPoint, Self.ClickRandomness);
  if Result then
  begin
    if (Random() < 0.75) then
      WaitUntilDistance := SRL.TruncatedGauss(Distance(Minimap.Center, MinimapPoint), 0)
    else
      WaitUntilDistance := SRL.TruncatedGauss(0, Distance(Minimap.Center, MinimapPoint));

    Self.WaitMoving(WorldPoint, WaitUntilDistance);
  end
end;

function TRSWalker.IsWalkable(WorldPoint: TPoint; PlayerPoint: TPoint; Angle: Double): Boolean;
var
  MinimapPoint: TPoint;
  B: TBox;
begin
  MinimapPoint := Self.WorldToMM(PlayerPoint, WorldPoint, Angle);

  case Self.ScreenWalk of
    True:
      begin
        B := Minimap.PointToMSRect(MinimapPoint, Angle).Bounds;
        if MainScreen.IsVisible(B.Middle) then
          Result := CountColor($000000, B.Expand(0, MainScreen.Bounds())) = 0; // Client doesn't always render everything when zoomed out
      end;

    False:
      begin
        Result := Minimap.IsPointOn(MinimapPoint, -1);
      end;
  end;
end;

(*
TRSWalker.WalkPath
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

Walks a path of points taken from the loaded map. 

Parameters
----------

Path
	Array of points taken from the loaded map to walk. Must be ordered from start to finish.	
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkPath([[100,100],[120,120],[140,140],[160,160],[180,180]]);
*)
function TRSWalker.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;

  function BuildPath(TPA: TPointArray): TPointArray;
  var
    I, J: Int32;
    Line: TPointArray;
  begin
    for I := 1 to High(TPA) do
    begin
      Line := TPAFromLine(TPA[I-1], TPA[I]);

      J := 0;
      while J < High(Line) do
      begin
        Result += Line[J];

        Inc(J, Random(5, 15));
      end;
    end;

    Result += TPA[High(TPA)];
  end;

  function AdvancePath(var Index: Int32; PlayerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := Index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(PlayerPoint)[0]);

    for Nearest := Nearest to High(Self.Path) do
      if Self.IsWalkable(Self.Path[Nearest], PlayerPoint, Angle) then
        Break;

    for Furthest := Nearest to High(Self.Path) do
      if not Self.IsWalkable(Self.Path[Furthest], PlayerPoint, Angle) then
        Break;

    if Self.IsWalkable(Self.Path[Index], PlayerPoint, Angle) then
      Index := SRL.TruncatedGauss(Furthest - 1, Index)
    else
      Index := SRL.TruncatedGauss(Furthest - 1, Nearest);

    Result := Index > Previous;
  end;

var
  PlayerPoint: TPoint;
  Index, Fails: Int32;
begin
  Self.Enabled := True;
  Self.Path := BuildPath([Self.GetMyPos()] + Path);

  while Self.Enabled and (Fails < 10) do
  begin
    PlayerPoint := Self.GetMyPos();

    if AdvancePath(Index, PlayerPoint) then
      Fails := 0
    else
    begin
      Inc(Fails);

      // Likely haven't moved far enough to advance to next point
      if (Fails < 5) then
      begin
        Wait(300);

        Continue;
      end;

      if (Fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if Index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(PlayerPoint, Self.Path[Index], WaitUntilDistance) then
        Exit(True);
    end else
      Self.WalkStep(PlayerPoint, Self.Path[Index]);
  end;

  if Fails = 10 then
    Self.Debug('Failed to advance path');
end;

(*
TRSWalker.WalkBlind
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;

"Blindly" walks to a point taken from the loaded map.
A straight line is generated between the player's position and destination which is then walked.

Parameters
----------

Destination
	Destination point taken from the loaded map.
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example
-------

  Walker.WalkBlind([300, 300]);
*)
function TRSWalker.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
begin
  Result := WalkPath([Destination], WaitUntilDistance);
end;

(*
TRSWalker.WebWalk
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;

Web walks to the destination point on the loaded map. Does **not** handle any obstacles.
Please run ``webber.simba`` to see how webgraphs are built.

Pre built webgraphs are available for "World" and "Zeah" when used.

Parameters
----------

Destination
	Destination point taken from the loaded map.
	
WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

PathRandomness
	Randomness to add to the path so the absoulte shortest path isn't always taken. Must be between 0..1

Example
-------

  var Walker: TRSWalker;

  Walker.Setup('world');
  Walker.WebWalk([4595, 3575]); // Lumbridge

  // Or use a location from the webgraph
  Walker.WebWalk(WorldWeb.LOCATION_LUMBRIDGE);
*)
function TRSWalker.WebWalk(Destination: TPoint; WaitUntilDistance: Int32 = 0; PathRandomness: Extended = 0): Boolean;
var
  Path: TPointArray;
begin
  if not InRange(PathRandomness, 0, 1) then
    Self.Fatal('TRSWalker.WebWalk `PathRandomness` must be within 0..1');

  Path   := Self.WebGraph.PathBetween(Self.GetMyPos, Destination, PathRandomness);
  Result := Self.WalkPath(Path, WaitUntilDistance);
end;

procedure TRSWalker.DebugPosition;
var
  X1, Y1, X2, Y2, X, Y: Int32;
  Bitmap, WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Time: Double;
  Position: TPoint;
  _: TPoint;
  Lines: TStringArray;
begin
  Time := PerformanceTimer();
  Position := Self.GetMyPos();
  Time := PerformanceTimer() - Time;

  X1 := Max(0, Position.X - 200);
  Y1 := Max(0, Position.Y - 200);
  X2 := Min(X1 + 400, Self.World.GetWidth()  - 1);
  Y2 := Min(Y1 + 400, Self.World.GetHeight() - 1);

  X := Position.X - X1;
  Y := Position.Y - Y1;

  WorldBitmap := Self.World.Copy(X1, Y1, X2, Y2);
  WorldBitmap.LineTo(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.LineTo(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox(Box(X - 2, Y - 2, X + 2, Y + 2), False, $FFFFFF);

  MinimapBitmap := GetMinimap(_);

  Bitmap.Init();
  Bitmap.SetSize(560, 420);
  Bitmap.DrawClear($403027);

  Lines := [
    '('      + ToStr(Position.X, ', ', Position.Y) + ')',
    'Acc: '  + ToStr(Round(Self.Similarity, 3)),
    'Time: ' + ToStr(Round(Time)) + ' ms'
  ];

  Bitmap.DrawSystemText(Lines[0], 'Consolas', 12, [420, 20 + MinimapBitmap.GetHeight()], False, $FFFFFF);
  Bitmap.DrawSystemText(Lines[1], 'Consolas', 12, [420, 370], False, $FFFFFF);
  Bitmap.DrawSystemText(Lines[2], 'Consolas', 12, [420, 390], False, $FFFFFF);

  WorldBitmap.DrawTransparent(10, 10, Bitmap);
  WorldBitmap.Free();

  MinimapBitmap.DrawTransparent(420, 10, Bitmap);
  MinimapBitmap.Free();

  Bitmap.Debug();
  Bitmap.Free();
end;

function TRSWalker.GetTileMSEx(Me, Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
var
  angle: Double;
begin
  Loc   := Minimap.Center + (Loc - Me);
  angle := Minimap.GetCompassAngle(False);
  Loc   := Loc.Rotate(angle, Minimap.Center);
  Result := Minimap.VecToMSRect(Vec3(Loc.x - offx, Loc.y - offy, Height), angle);
end;

function TRSWalker.GetTileMS(Loc: TPoint; Height:Double=0; Offx,Offy:Double=0): TRectangle;
begin
  Result := GetTileMSEx(Self.GetMyPos(), Loc, Height, Offx, Offy);
end;

function TRSWalker.MSToWorldEx(Me, Loc: TPoint; Height: Int32 = 0; Accuracy: Double = 0.2): TPoint;
begin
  Result := Me + (MainScreen.PointToMM(Loc, Height, Accuracy).ToPoint() - Minimap.Center);
  Result := Result.Rotate(-Minimap.GetCompassAngle(False), Me);
end;

function TRSWalker.MSToWorld(Loc: TPoint; Height: Int32=0; Accuracy:Double=0.2): TPoint;
begin
  Result := Self.MSToWorldEx(Self.GetMyPos(), Loc, Height, Accuracy);
end;
