{$DEFINE SRL_INTERFACEAREA_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSInterfaceArea = type TRSInterface;

procedure TRSInterfaceArea.Setup; override;
begin
  inherited;
  
  Self.Name := 'Interface Area';
end;

procedure TRSInterfaceArea.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@MainScreen.X1];
        Self.Alignment.Right := [@MainScreen.X2];
        Self.Alignment.Top := [@MainScreen.Y1];
        Self.Alignment.Bottom := [@MainScreen.Y2];
      end;

    ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Self.Alignment.Left := [@MainScreen.X1];
        Self.Alignment.Right := [@GameTabs.X1, -10];
        Self.Alignment.Top := [@MainScreen.Y1];
        Self.Alignment.Bottom := [@Chat.Y1];
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@MainScreen.X1];
        Self.Alignment.Right := [@GameTabs.X1, 15];
        Self.Alignment.Top := [@MainScreen.Y1];
        Self.Alignment.Bottom := [@Chat.Y1];
      end;
  end;
end;


//What I call Classic UI is the brownish interface. E.G. Bank, Anvil, etc.
function TRSInterfaceArea.IsClassicOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(3358536, 2), Self.Bounds) > 10000);
end;

//What I call Scroll UI is the yellowish interface. E.G. Quests, Stats guides, etc.
function TRSInterfaceArea.IsScrollOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(7904689, 17), Self.Bounds) > 10000);
end;

function TRSInterfaceArea.HasInterface: Boolean;
begin
  Result := Self.IsClassicOpen or Self.IsScrollOpen;
end;

function TRSInterfaceArea.GetButton: TRSButton;
var
  Buttons: TRSButtonArray := FindButtons([[21,21], [24,23]]);
begin
  if Buttons <> [] then
    Result := Buttons[High(Buttons)];
end;


function TRSInterfaceArea.ClickCloseButton(PressEscape: Boolean = False): Boolean;
var
  CloseButton: TRSButton := Self.GetButton;
begin
  Result := CloseButton <> [];

  if Result then
  begin
    case PressEscape of
      False: CloseButton.Click;
      True:  Keyboard.PressKey(VK_ESCAPE);
    end;
  end;
end;

function TRSInterfaceArea.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.HasInterface then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.HasInterface, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;




var
  InterfaceArea: TRSInterfaceArea;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  InterfaceArea.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  InterfaceArea.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  InterfaceArea.Draw(Bitmap);
end;
