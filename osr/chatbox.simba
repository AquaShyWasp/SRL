{$DEFINE SRL_CHATBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  CHATBOX_MESSAGE_LINES = [0..7];
  CHATBOX_INPUT_LINE = 8;

type
  TRSChatBox = record(TRSInterface)
    MakeCache: array of record Item: String; Index: Int32; end;
  end;

procedure TRSChatBox.Setup;
begin
  Self.Name := 'Chatbox';
  Self.Mode := RSClient.Mode;

  Self.Alignment.Left := [@RootInterface.X1];
  Self.Alignment.Right := [@ChatButtons.X2];
  Self.Alignment.Top := [@ChatButtons.Y1, -142];
  Self.Alignment.Bottom := [@ChatButtons.Y1, -1];
end;

procedure TRSChatbox.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.GetLineBoxes(), False, $00FFFF);
end;

function TRSChatBox.IsOpen: Boolean;
begin
  Result := SRL.CountColor(CTS0(9744834, 20), Self.Bounds) > 45000;
end;

function TRSChatBox.GetLineBoxes: TBoxArray;
begin
  Result := Grid(1, 9, Width - 35, 14, [0, 0], [Self.X1 + 10, Self.Y1 + 7]);
  Result[8].Y1 += 2;
  Result[8].Y2 += 2;
end;

function TRSChatBox.GetQuery: String;
begin
  Result := OCR.Recognize(Self.Bounds(), [$000000], RS_FONTSET_BOLD_12);
end;

function TRSChatbox.GetQueryAnswer: String;
begin
  Result := OCR.Recognize(Self.Bounds(), [8388608], RS_FONTSET_BOLD_12);
end;

function TRSChatbox.WaitQuery(Query: String; WaitTime: Int32): Boolean;
var
  T: UInt64;
begin
  T := GetTickCount() + WaitTime;
  while (T > GetTickCount()) do
  begin
    if Query in GetQuery() then
      Exit(True);

    Wait(0, 1000, wdLeft);
  end;
end;

function TRSChatbox.AnswerQuery(Query, Answer: String; WaitTime: Int32): Boolean;
begin
  if Self.WaitQuery(Query, WaitTime) then
  begin
    if Self.GetQueryAnswer() <> Answer then
      while Self.GetQueryAnswer() <> '*' do
        Keyboard.PressKey(VK_BACK);

    Keyboard.Send(Answer, VK_ENTER);

    Exit(True);
  end;
end;

function TRSChatbox.HasLevelUp: Boolean;
begin
  with Self.Bounds() do
    Result := FindTextColor('Congratulations', RS_FONT_QUILL_8, 8388608, 0, X1, Y1, X2, Y2, 1);
end;

function TRSChatbox.GetDisplayName: String;
var
  Text: String;
begin
  Text := OCR.Recognize(Self.GetLineBoxes[CHATBOX_INPUT_LINE], [$000000], RS_FONTSET_PLAIN_12);
  if Text.EndsWith(':') then
    Result := Copy(Text, 1, Length(Text) - 1);
end;

function TRSChatbox.FindMakeButtons(out QuantityButtons, ItemButtons: TBoxArray): Boolean;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  if SRL.FindColors(TPA, CTS0(6191241), Self.Bounds()) then
    ATPA += TPA;
  if SRL.FindColors(TPA, CTS0(8101298), Self.Bounds()) then
    ATPA += TPA;

  ATPA := ATPA.Merge().Cluster(Self.Width, 5);
  ATPA.SortByY();

  if (Length(ATPA) = 2) then
  begin
    QuantityButtons := ATPA[0].Cluster(5).ToTBA();
    QuantityButtons.SortByX();

    ItemButtons := ATPA[1].Cluster(5).ToTBA();
    ItemButtons.SortByX();

    Result := (Length(QuantityButtons) > 0) and (Length(ItemButtons) > 0);
  end;
end;

function TRSChatbox.FindMakeItem(Item: String): Int32;
const
  HINT_COLOR = $A0FFFF;
var
  QuantityButtons, ItemButtons: TBoxArray;
  I: Int32;
begin
  Result := -1;

  if Self.FindMakeButtons(QuantityButtons, ItemButtons) then
  begin
    for I := 0 to High(ItemButtons) do
    begin
      Mouse.Move(ItemButtons[I]);

      WaitEx(100, 200);

      if WaitUntil(SRL.CountColor(HINT_COLOR, Self.Bounds()) > 0, SRL.TruncatedGauss(100, 1000), 4000) and
         FindTextColor(Item, RS_FONT_PLAIN_12, 0, 0, Self.Bounds, 1) then
        Exit(I);
    end;
  end;
end;

function TRSChatbox.ClickMakeButton(Index: Int32; Quantity: String; UseKeyboard: Boolean = False): Boolean; overload;
const
  BUTTON_SELECTED = $FFFFFF;
  BUTTON_UNSELECTED = $203040;
var
  QuantityButtons, ItemButtons: TBoxArray;
  B: TBox;
  I: Int32;
begin
  if Self.FindMakeButtons(QuantityButtons, ItemButtons) and (Index < Length(ItemButtons)) then
  begin
    B := QuantityButtons.Merge();

    // find quantity
    if FindText(Quantity, RS_FONT_PLAIN_11, B.X1, B.Y1, B.X2, B.Y2, B) = 1 then
    begin
      // select quantity
      if CountColor(BUTTON_SELECTED, B) = 0 then
        Mouse.Click(B, MOUSE_LEFT);

      B := ItemButtons[Index];
      B.Y1 := B.Y2;
      B.Y2 += 20;

      if UseKeyboard then
      begin
        if FindText('Space', RS_FONT_PLAIN_11, B.X1, B.Y1, B.X2, B.Y2, 1) then
          Keyboard.PressKey(VK_SPACE)
        else
          Keyboard.PressKey(VK_1 + Index);
      end else
        Mouse.Click(ItemButtons[Index], MOUSE_LEFT);

      Result := True;
    end;
  end;
end;

function TRSChatbox.IsMakeOpen: Boolean; overload;
var
  QuantityButtons, ItemButtons: TBoxArray;
begin
  Result := FindMakeButtons(QuantityButtons, ItemButtons);
end;

function TRSChatbox.IsMakeOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsMakeOpen(), Interval, WaitTime);
end;

function TRSChatBox.ClickMakeButton(Item: String; Quantity: String; UseKeyboard: Boolean = False): Boolean; overload;
var
  QuantityButtons, ItemButtons: TBoxArray;
  I: Int32;
  Index: Int32;
begin
  Index := -1;

  if Self.FindMakeButtons(QuantityButtons, ItemButtons) then
  begin
    for I := 0 to High(Self.MakeCache) do
      if Self.MakeCache[I].Item = Item then
        Index := Self.MakeCache[I].Index;

    if (Index = -1) then
    begin
      Index := Self.FindMakeItem(Item);

      if (Index > -1) then
      begin
        Self.Debug('Found "' + Item + '" at button index: ' + ToString(Index));
        Self.MakeCache += [Item, Index];
      end;
    end;

    if (Index > -1) then
      Result := ClickMakeButton(Index, Quantity, UseKeyboard);
  end;
end;

var
  Chatbox: TRSChatBox;

procedure TSRL.Setup; override;
begin
  Chatbox.Setup();

  inherited;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Chatbox.Debug(Bitmap);
end;
