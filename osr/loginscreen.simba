{$DEFINE SRL_LOGINSCREEN_INCLUDED}
{$IFNDEF OSRS}
  {$include_once SRL/osr.simba}
{$ENDIF}

type
  TRSLoginScreen = record(TRSInterface)
    BUTTON_WORLD_SWITCHER: TRSInterfaceButton;
    BUTTON_WORLD_SWITCHER_CLOSE: TRSInterfaceButton;
    BUTTON_EXISTING_USER: TRSInterfaceButton;
    BUTTON_LOGIN: TRSInterfaceButton;
    BUTTON_LOGIN_FIELD: TRSInterfaceButton;
    BUTTON_PASSWORD_FIELD: TRSInterfaceButton;
    BUTTON_OK: TRSInterfaceButton;
    BUTTON_TRY_AGAIN: TRSInterfaceButton;
  end;

const
  LOGIN_MESSAGE_NONE = '';
  LOGIN_MESSAGE_CONNECTING = 'Connecting to server';
  LOGIN_MESSAGE_INVALID_CREDENTIALS = 'Invalid credentials';
  LOGIN_MESSAGE_NEED_SKILL_TOTAL = 'You need a skill total of';
  LOGIN_MESSAGE_INVALID_USER_PASS = 'Please enter your username/email address.';
  LOGIN_MESSAGE_ERROR_CONNECTING = 'Error connecting to server';
  LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT = 'Your account has not logged out';
  LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE = 'Login server offline';
  LOGIN_MESSAGE_ERROR_LOADING_PROFILE = 'Error loading your profile';
  LOGIN_MESSAGE_CONNECTION_TIMED_OUT = 'Connection timed out';
  LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED = 'Login limit exceeded';
  LOGIN_MESSAGE_WORLD_FULL = 'This world is full';
  LOGIN_MESSAGE_ACCOUNT_DISABLED = 'Your account has been disabled';
  LOGIN_MESSAGE_MEMBERS = 'You need a members account';
  LOGIN_MESSAGE_IN_MEMBERS_AREA = 'You are standing in a members-only area';

  LOGIN_MESSAGES = [
    LOGIN_MESSAGE_CONNECTING,
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_INVALID_USER_PASS,
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED,
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA
  ];

function TRSLoginScreen.IsWorldSwitcherOpen: Boolean; overload;
begin
  Result := Self.FindButton(Self.BUTTON_WORLD_SWITCHER_CLOSE);
end;

function TRSLoginScreen.IsWorldSwitcherOpen(WaitTime: Int32): Boolean; overload;
var
  T: UInt64;
begin
  T := GetTickCount() + WaitTime;

  while (T > GetTickCount()) do
  begin
    if Self.IsWorldSwitcherOpen() then
      Exit(True);

    Wait(0, 1000, wdLeft);
  end;
end;

function TRSLoginScreen.OpenWorldSwitcher: Boolean;
begin
  Result := Self.ClickButton(Self.BUTTON_WORLD_SWITCHER, MOUSE_LEFT) and Self.IsWorldSwitcherOpen(10000);
end;

function TRSLoginScreen.CloseWorldSwitcher: Boolean;
begin
  Result := Self.ClickButton(Self.BUTTON_WORLD_SWITCHER_CLOSE, MOUSE_LEFT);
end;

function TRSLoginScreen.SwitchToWorld(World: Int32): Boolean;
var
  Button: TRSInterfaceButton;
begin
  if Self.OpenWorldSwitcher() then
  begin
    Button.Color := 0;
    Button.Font := RS_FONT_BOLD_12;
    Button.Text := ToString(World);

    for 1 to 3 do // Three pages of worlds
    begin
      Wait(500, 2500, wdLeft);

      if Self.ClickButton(Button, MOUSE_LEFT) then
        Break;

      Keyboard.KeyDown(VK_RIGHT);
      Keyboard.KeyUp(VK_RIGHT);
    end;

    Self.CloseWorldSwitcher();
  end;

  Result := (Self.GetCurrentWorld() = World);
end;

procedure TRSLoginScreen.CloseDialogs;
begin
  Self.ClickButton(Self.BUTTON_OK, MOUSE_LEFT);
  Self.ClickButton(Self.BUTTON_TRY_AGAIN, MOUSE_LEFT);
end;

function TRSLoginScreen.IsOpen: Boolean;
begin
  Result := Self.FindButton(Self.BUTTON_WORLD_SWITCHER);
end;

function TRSLoginScreen.EnterLogin(S: String): Boolean;
var
  Field: TBox;
  T: UInt64;
begin
  if Self.FindButton(Self.BUTTON_EXISTING_USER) and (not Self.ClickButton(Self.BUTTON_EXISTING_USER, MOUSE_LEFT)) then
    Exit(False);

  if Self.FindButton(Self.BUTTON_LOGIN_FIELD, Field) then
  begin
    Field.X1 := Field.X2;
    Field.X2 += 250;

    if FindTextColor(S + ' ', RS_FONT_BOLD_12, $FFFFFF, 0, Field.X1, Field.Y1, Field.X2, Field.Y2, 1) then
      Exit(True);

    Field.Y1 += 2;
    Field.Y2 -= 2;

    while Self.IsOpen() do
    begin
      T := GetTickCount() + Round(SRL.TruncatedGauss(600, 1200));
      while (T > GetTickCount()) do
      begin
        if SRL.CountColor(CTS0($00FFFF), Field) > 0 then
          Break(2);

        Wait(0, 1000, wdLeft);
      end;

      Keyboard.PressKey(VK_TAB);
    end;

    while SRL.CountColor(CTS0($FFFFFF), Field) > 0 do
      Keyboard.PressKey(VK_BACK);

    Keyboard.Send(S);

    Result := TRue;
  end;
end;

function TRSLoginScreen.EnterPassword(S: String): Boolean;
var
  Field: TBox;
  T: UInt64;
begin
  if Self.FindButton(Self.BUTTON_EXISTING_USER) and (not Self.ClickButton(Self.BUTTON_EXISTING_USER, MOUSE_LEFT)) then
    Exit(False);

  if Self.FindButton(Self.BUTTON_PASSWORD_FIELD, Field) then
  begin
    Field.X1 := Field.X2;
    Field.X2 += 250;
    Field.Y1 += 2;
    Field.Y2 -= 2;

    while Self.IsOpen() do
    begin
      T := GetTickCount() + Round(SRL.TruncatedGauss(600, 1200));
      while (T > GetTickCount()) do
      begin
        if SRL.CountColor(CTS0($00FFFF), Field) > 0 then
          Break(2);

        Wait(0, 1000, wdLeft);
      end;

      Keyboard.PressKey(VK_TAB);
    end;

    while SRL.CountColor(CTS0($FFFFFF), Field) > 0 do
      Keyboard.PressKey(VK_BACK);

    Keyboard.Send(S);

    Result := True;
  end;
end;

function TRSLoginScreen.GetLoginMessage: String;
var
  B: TBox;
  I: Int32;
begin
  Result := LOGIN_MESSAGE_NONE;

  Freeze();

  try
    if Self.IsOpen() then
    begin
      B := Self.Bounds();

      for I := 0 to High(LOGIN_MESSAGES) do
        if FindTextColor(LOGIN_MESSAGES[I], RS_FONT_BOLD_12, $00FFFF, 0, B.X1, B.Y1, B.X2, B.Y2, 1) then
          Exit(LOGIN_MESSAGES[I]);
    end;
  finally
    UnFreeze();
  end;
end;

function TRSLoginScreen.HandleMessage(Message: String): Boolean;
begin
  Debug('Handling login message: ' + Message);

  case Message of
    // Cannot recover
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED:
      Exit(False);

    // Retry
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_INVALID_USER_PASS:
      Exit(True);

    // Retry after ~15 seconds
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL:
      begin
        Wait(10000, 20000);

        Exit(True);
      end;

    // No handler
    else
      TerminateScript('No handler for message');
  end;
end;

function TRSLoginScreen.Login(User, Pass: String): Boolean;
var
  Message: String;
  Attempts: Int32;
begin
  Debug('Logging in player');

  while Self.IsOpen() and (Attempts < 10) do
  begin
    Debug('Attempt: ' + ToString(Attempts));

    while Self.IsOpen() do
    begin
      Self.CloseDialogs();
      Self.EnterLogin(User);
      Self.EnterPassword(Pass);

      Keyboard.PressKey(VK_ENTER);

      // Wait for connecting message
      while (Self.GetLoginMessage() <> LOGIN_MESSAGE_CONNECTING) do
        Wait(500);

      // Wait for connecting message to disapear
      while (Self.GetLoginMessage() = LOGIN_MESSAGE_CONNECTING) do
        Wait(500);

      if Self.IsOpen() then
      begin
        Message := Self.GetLoginMessage();
        if not Self.HandleMessage(Message) then
          Exit(False);
      end;
    end;

    Inc(Attempts);
  end;

  if LobbyScreen.IsOpen() then
    LobbyScreen.Play();

  Result := SRL.IsLoggedIn();
end;

function TRSLoginScreen.GetCurrentWorld: Int32;
var
  B: TBox;
begin
  Result := -1;

  with Self.Bounds() do
    if FindText('World', RS_FONT_BOLD_12, X1, Y1, X2, Y2, B) = 1 then
    begin
      B.X2 += 40;

      Result := StrToIntDef(ExtractFromStr(OCR.Recognize($FFFFFF, 0, B, RS_FONTSET_BOLD_12), Numbers), -1);
    end;
end;

procedure TRSLoginScreen.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

procedure TRSLoginScreen.Setup(ClientMode: ERSClientMode);
begin
  Self.Name := 'Login Screen';

  Self.BUTTON_WORLD_SWITCHER := Self.AddOCRButton('Click to switch', RS_FONT_PLAIN_11, $FFFFFF);
  Self.BUTTON_WORLD_SWITCHER_CLOSE := Self.AddOCRButton('Cancel', RS_FONT_PLAIN_11, $FFFFFF);
  Self.BUTTON_EXISTING_USER := Self.AddOCRButton('Existing User', RS_FONT_BOLD_12, $FFFFFF);
  Self.BUTTON_LOGIN := Self.AddOCRButton('Login ', RS_FONT_BOLD_12, $FFFFFF);
  Self.BUTTON_LOGIN_FIELD := Self.AddOCRButton('Login:', RS_FONT_BOLD_12, $FFFFFF);
  Self.BUTTON_PASSWORD_FIELD := Self.AddOCRButton('Password:', RS_FONT_BOLD_12, $FFFFFF);
  Self.BUTTON_OK := Self.AddOCRButton(' Ok ', RS_FONT_BOLD_12, $FFFFFF);
  Self.BUTTON_TRY_AGAIN := Self.AddOCRButton('Try again', RS_FONT_PLAIN_12, $FFFFFF);

  if ClientMode in [RS_CLIENT_FIXED, RS_CLIENT_RESIZABLE_CLASSIC, RS_CLIENT_RESIZABLE_BOTTOM] then
  begin
    Self.Alignment.Left := [@RootInterface.X1];
    Self.Alignment.Right := [@RootInterface.X2];
    Self.Alignment.Top := [@RootInterface.Y1];
    Self.Alignment.Bottom := [@RootInterface.Y1, 502];
    Self.Alignment.Center := [764, 0];
  end;
end;

var
  LoginScreen: TRSLoginScreen;

begin
  SRL.AddSetupMethod(@LoginScreen.Setup);
  SRL.AddDebugMethod(@LoginScreen.Debug);
end;
