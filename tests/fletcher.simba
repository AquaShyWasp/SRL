{$DEFINE SRL_USE_REMOTEINPUT}

{$I SRL/osr.simba}

type
  EFletchTask = (
    FLETCH_ARROW_SHAFTS,
    FLETCH_OAK_LONGBOW_UNSTRUNG,
    FLETCH_WILLOW_SHORTBOW_UNSTRUNG,
    FLETCH_WILLOW_LONGBOW_UNSTRUNG,
    FLETCH_MAPLE_LONGBOW_UNSTRUNG,
    FLETCH_YEW_LONGBOW_UNSTRUNG,
    FLETCH_YEW_LONGBOW
  );

const
  ITEM_TO_FLETCH = FLETCH_YEW_LONGBOW_UNSTRUNG;
  BANK_TO_USE    = BANK_LOCATION_GRAND_EXCHANGE;

type
  TScript = record
    Task: EFletchTask;
    EarlyBank: Int32;

    Activity: record
      Countdown: TCountdown;
      XP: Int32;
    end;

    CurrentTool: String;
    CurrentItem: String;
    CurrentItemXP: Single;
    CurrentItemMaterials: array of record
      Item: String; Amount: Int32;
    end;
  end;

procedure TScript.DoAntiban;
begin
  Self.Activity.Countdown.Pause();

  try
    Antiban.DoAntiban();
  finally
    Self.Activity.Countdown.Resume();
  end;
end;

procedure TScript.Antiban_HoverBank;
begin
  Antiban.Debug('Hover bank');

  if BankScreen.Hover(BANK_TO_USE) and SRL.Dice(50) then
  begin
    ChooseOption.Open();

    if SRL.Dice(50) then
    begin
      Wait(0, 2500, wdLeft);

      ChooseOption.Hover(['Use Bank', 'Bank Bank']);
    end;
  end;
end;

procedure TScript.Antiban_EarlyBank;
begin
  Self.EarlyBank := SRL.TruncatedGauss(Self.CountMaterials(), 1);

  Antiban.Debug('Early bank: ' + ToString(Self.EarlyBank));
end;

procedure TScript.Antiban_AFK;
var
  Time: Int32 := SRL.TruncatedGauss(1000, 60000);
begin
  Antiban.Debug('AFK for ' + ToString(Time div 1000) + ' seconds');

  if Random() < 0.50 then
    Antiban.LoseFocus();

  Wait(Time);
end;

procedure TScript.Setup(Task: EFletchTask);
begin
  Self.Task := Task;

  case Self.Task of
    FLETCH_ARROW_SHAFTS:
      begin
        Self.CurrentItemXP := 5;
        Self.CurrentItem := 'arrow shafts';
        Self.CurrentItemMaterials += ['Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_OAK_LONGBOW_UNSTRUNG:
      begin
        Self.CurrentItemXP := 25;
        Self.CurrentItem := 'Oak longbow (u)';
        Self.CurrentItemMaterials += ['Oak Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_WILLOW_SHORTBOW_UNSTRUNG:
      begin
        Self.CurrentItemXP := 33;
        Self.CurrentItem := 'Willow shortbow (u)';
        Self.CurrentItemMaterials += ['Willow Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_WILLOW_LONGBOW_UNSTRUNG:
      begin
        Self.CurrentItemXP := 41.5;
        Self.CurrentItem := 'Willow longbow (u)';
        Self.CurrentItemMaterials += ['Willow Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_MAPLE_LONGBOW_UNSTRUNG:
      begin
        Self.CurrentItemXP := 58.5;
        Self.CurrentItem := 'Maple longbow (u)';
        Self.CurrentItemMaterials += ['Maple Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_YEW_LONGBOW_UNSTRUNG:
      begin
        Self.CurrentItemXP := 75;
        Self.CurrentItem := 'Yew longbow (u)';
        Self.CurrentItemMaterials += ['Yew Logs', 27];
        Self.CurrentTool := 'knife';
      end;

    FLETCH_YEW_LONGBOW:
      begin
        Self.CurrentItemXP := 75;
        Self.CurrentItem := 'Yew longbow';
        Self.CurrentItemMaterials += ['Yew longbow (u)', 14];
        Self.CurrentItemMaterials += ['Bow string', 14];
        Self.CurrentTool := '';
      end;
  end;

  Antiban.Skills := [SKILL_FLETCHING];

  // AFK tasks are paused 95% of the time which is why the interval is very low.
  Antiban.AddTask(0.5 * ONE_MINUTE, @Self.Antiban_AFK);
  Antiban.AddTask(1.0 * ONE_MINUTE, @Self.Antiban_AFK);
  Antiban.AddTask(1.5 * ONE_MINUTE, @Self.Antiban_AFK);
  Antiban.AddTask(2.0 * ONE_MINUTE, @Self.Antiban_AFK);

  Antiban.AddTask(10 * ONE_MINUTE, @Self.Antiban_EarlyBank);
  Antiban.AddTask(20 * ONE_MINUTE, @Self.Antiban_EarlyBank);

  Antiban.AddTask(10 * ONE_MINUTE, @Self.Antiban_HoverBank);
  Antiban.AddTask(20 * ONE_MINUTE, @Self.Antiban_HoverBank);

  Antiban.AddTask(10 * ONE_MINUTE, @Antiban.LoseFocus);
  Antiban.AddTask(20 * ONE_MINUTE, @Antiban.LoseFocus);

  Antiban.AddTask(10 * ONE_MINUTE, @Antiban.RandomMouse);
  Antiban.AddTask(20 * ONE_MINUTE, @Antiban.RandomMouse);

  Antiban.AddTask(20 * ONE_MINUTE, @Antiban.RandomTab);
  Antiban.AddTask(40 * ONE_MINUTE, @Antiban.RandomTab);

  Antiban.AddTask(20 * ONE_MINUTE, @Antiban.RandomRightClick);
  Antiban.AddTask(40 * ONE_MINUTE, @Antiban.RandomRightClick);

  Antiban.AddTask(30 * ONE_MINUTE, @Antiban.RandomRotate);
  Antiban.AddTask(60 * ONE_MINUTE, @Antiban.RandomRotate);

  Antiban.AddTask(50  * ONE_MINUTE, @Antiban.HoverSkills);
  Antiban.AddTask(100 * ONE_MINUTE, @Antiban.HoverSkills);

  Activity.Countdown.Init(90000);
end;

procedure TScript.Debug(S: String);
begin
  WriteLn(SRL.TimeStamp() + ':[Script]: ' + S);
end;

procedure TScript.Fatal(S: String);
begin
  Self.Debug(S);

  TerminateScript();
end;

function TScript.CheckActivity: Boolean;
begin
  if Result := XPBar.Read() > Activity.XP then
  begin
    Activity.Countdown.Restart();
    Activity.XP := XPBar.Read();
  end;

  if Activity.Countdown.IsFinished() then
    Self.Fatal('Haven''t gained any experience in ' + ToString(Activity.Countdown.Length div 1000) + ' seconds');
end;

function TScript.CountMaterials: Int32;
var
  I: Int32;
  Amounts: TIntegerArray;
begin
  for I := 0 to High(Self.CurrentItemMaterials) do
    Amounts += Inventory.Count(Self.CurrentItemMaterials[I].Item);

  Result := Amounts.Min();
end;

function TScript.HasMaterials: Boolean; overload;
begin
  Result := CountMaterials() > 0;
end;

function TScript.HasMaterials(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(0, 1500);

  Result := WaitUntil(Self.HasMaterials(), Interval, WaitTime);
end;

function TScript.Bank: Boolean;
var
  I: Int32;
begin
  Antiban.PauseTask(@Self.Antiban_HoverBank);

  if (Self.EarlyBank = 0) and Self.HasMaterials() then
  begin
    Result := BankScreen.Close();
    if not Result then
      Self.Debug('Failed to close bankscreen. (already had materials)');

    Exit;
  end;

  if not BankScreen.Open(BANK_TO_USE) then
  begin
    Self.Debug('Failed to open bank');

    Exit;
  end;

  Antiban.ResumeTask(@Self.Antiban_AFK);

  if (Inventory.Count(Self.CurrentItem) > 0) and (not BankScreen.DepositQuantity(Self.CurrentItem, Self.CurrentItemMaterials[0].Amount)) then
  begin
    Self.Debug('Failed to deposit current item');

    Exit;
  end;

  if (Self.CurrentTool <> '') and (Inventory.Count(Self.CurrentTool) = 0) then
  begin
    BankScreen.DepositAll();

    if (not BankScreen.Search(Self.CurrentTool)) and (not BankScreen.Withdraw(Self.CurrentTool, 1, False)) then
    begin
      Self.Fatal('Failed to withdraw tool');

      Exit;
    end;
  end;

  if not BankScreen.Search('') then
  begin
    Self.Debug('Unable to clear search');

    Exit;
  end;

  for I := 0 to High(Self.CurrentItemMaterials) do
  begin
    if not BankScreen.WithdrawQuantity(Self.CurrentItemMaterials[I].Item, Self.CurrentItemMaterials[I].Amount, False) then
    begin
      Self.Debug('Failed to withdraw: ' + Self.CurrentItemMaterials[I].Item);

      Break;
    end;

    Wait(0, 2500, wdLeft);
  end;

  if (not Self.HasMaterials(Random(3000, 5000))) then
  begin
    Self.Debug('Failed to withdraw materials');
    Self.Debug('Depositing all.');

    BankScreen.DepositAll(); // Clean attempt next time

    Exit;
  end;

  if not BankScreen.Close() then
  begin
    Self.Debug('Failed to close bankscreen');

    Exit;
  end;

  Self.EarlyBank := 0;

  Result := True;
end;

function TScript.Fletch: Boolean;
var
  TargetXP: Int32;
  Timeout: TCountDown;
begin
  Antiban.ResumeTask(@Self.Antiban_AFK);

  if (Self.EarlyBank > 0) then
    TargetXP := XPBar.Read() + Round(Self.EarlyBank * Floor(Self.CurrentItemXP))
  else
    TargetXP := XPBar.Read() + Round(Self.CountMaterials() * Floor(Self.CurrentItemXP));

  if not ((Self.CurrentTool <> '') and Inventory.Use(Self.CurrentTool, Self.CurrentItemMaterials[0].Item)) and
     not ((Self.CurrentTool = '')  and Inventory.Use(Self.CurrentItemMaterials[0].Item, Self.CurrentItemMaterials[1].Item)) then
    begin
      Self.Debug('Failed to use material');

      Exit;
    end;

  if not Chatbox.IsMakeOpen(Random(3000, 6000)) then
  begin
    Self.Debug('Make interface did not open');

    Exit;
  end;

  if not Chatbox.ClickMakeButton(Self.CurrentItem.Replace('(u)', '').Strip(), 'All') then
  begin
    Self.Debug('Failed to handle make interface');

    Exit;
  end;

  Antiban.PauseTask(@Self.Antiban_AFK);
  Antiban.ResumeTask(@Self.Antiban_HoverBank);

  if Random() < 0.65 then
  begin
    if Random() < 0.50 then
      Wait(0, 10000, wdLeft)
    else
      Wait(0, 1000, wdLeft);

    Antiban.LoseFocus();
  end;

  Timeout.Init(5000);

  while (TargetXP > XPBar.Read()) and (not Chatbox.HasLevelUp()) do
  begin
    if Self.CheckActivity() then
      Timeout.Restart();

    if Timeout.IsFinished() then
    begin
      Self.Debug('Timed out while fletching: ' + ToString(XPBar.Read()) + ', ' + ToString(TargetXP));

      Exit;
    end;

    Self.DoAntiban();

    Wait(500, 5000, wdLeft);
  end;

  if (Self.EarlyBank = 0) and SRL.Dice(50) then // ANTIBAN: little AFK 50% of the time
    Wait(0, 15000, wdLeft);

  Result := True;
end;

procedure TScript.Run;
var
  I: Int32;
begin
  while SRL.IsLoggedIn() do
  begin
    // Randomize material order each loop
    if Length(Self.CurrentItemMaterials) > 1 then
      for I := 0 to High(Self.CurrentItemMaterials) do
        Swap(Self.CurrentItemMaterials[I], Self.CurrentItemMaterials[Random(Length(Self.CurrentItemMaterials))]);

    Self.CheckActivity();
    if (not Self.Bank()) or (not Self.Fletch()) then
      Wait(1000, 2000);
  end;
end;

procedure TerminateScript; override;
begin
  SaveScreenshot('fletcher-fatal.png');

  inherited();
end;

var
  Script: TScript;

// ANTIBAN: Check antiban before we move the mouse. This means the script could do a random task at any action.
procedure TMouse.Move(P: TPoint); override;
begin
  Script.DoAntiban();

  inherited(P);
end;

// ANTIBAN: Check antiban before we press a key
procedure TKeyboard.PressKey(Key: Integer); override;
begin
  Script.DoAntiban();

  inherited(Key);
end;

// ANTIBAN: 10% chance of deposit normally
function TRSBankScreen.DepositQuantity(Item: String; Amount: Int32): Boolean; override;
begin
  if SRL.Dice(10) then
  begin
    Result := Self.Deposit(Item, Amount);
    if not Result then
      Self.Debug('NORMAL DEPOSIT FAILED');
  end else
  begin
    Result := inherited();
    if not Result then
      Self.Debug('DEPOSIT QUANTITY FAILED');
  end;
end;

// ANTIBAN: 10% chance of withdrawing normally
function TRSBankScreen.WithdrawQuantity(Item: String; Amount: Int32; Noted: Boolean): Boolean; override;
begin
  if SRL.Dice(10) then
    Result := Self.Withdraw(Item, Amount, Noted)
  else
    Result := inherited();
end;

// ANTIBAN: 10% chance of clicking the close button
function TRSBankScreen.Close(UseKeyboard: Boolean = False): Boolean; override;
begin
  Result := inherited(SRL.Dice(90));
end;

// ANTIBAN: 20% chance of clicking make
function TRSChatBox.ClickMakeButton(Item: String; Quantity: String; UseKeyboard: Boolean = False): Boolean; override;
begin
  Result := inherited(Item, Quantity, SRL.Dice(80));
end;

begin
  SRL.Setup(RS_CLIENT_RESIZABLE_CLASSIC);

  Script.Setup(ITEM_TO_FLETCH);
  Script.Run();
end.
